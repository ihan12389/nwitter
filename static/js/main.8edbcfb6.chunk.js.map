{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Nweet","userObj","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","attachmentUrl","prevAttachmentUrl","setPrevAttachmentUrl","newAttachment","setNewAttachment","fileName","useRef","onDeleteClick","window","confirm","doc","id","delete","refFromURL","toggleEditing","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","update","autoFocus","accept","files","theFile","reader","FileReader","onloadend","finishedEvent","result","currentTarget","name_string","readAsDataURL","JSON","stringify","substring","current","innerText","length","for","faFile","userName","src","class","faTrash","faPencilAlt","NweetFactory","nweet","setNweet","attachment","setAttachment","fileInput","createAt","Date","now","creatorId","displayName","collection","add","maxLength","faPlus","opacity","backgroundImage","faTimes","Home","nweets","setNweets","useEffect","orderBy","onSnapshot","snapshot","nweetArray","docs","map","marginTop","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","updateProfile","signOut","push","Navigation","to","faUser","AppRouter","isLoggedIn","exact","path","Profile","App","init","setInit","setUserobj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8edbcfb6.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();\r\n","import React, { useState } from \"react\";\r\nimport { authService } from \"fbase\";\r\n\r\nconst inputStyle = {};\r\n\r\nconst AuthForm = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n    if (name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n  };\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      let data;\r\n      if (newAccount) {\r\n        data = await authService.createUserWithEmailAndPassword(\r\n          email,\r\n          password\r\n        );\r\n      } else {\r\n        data = await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n      console.log(data);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n  const toggleAccount = () => setNewAccount((prev) => !prev);\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit} className=\"container\">\r\n        <input\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          required\r\n          value={email}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          className=\"authInput\"\r\n          onChange={onChange}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          className=\"authInput authSubmit\"\r\n          value={newAccount ? \"Create Account\" : \"Sign In\"}\r\n        />\r\n        {error && <span className=\"authError\">{error}</span>}\r\n      </form>\r\n      <span onClick={toggleAccount} className=\"authSwitch\">\r\n        {newAccount ? \"Sign In\" : \"Create Account\"}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport { authService, firebaseInstance } from \"fbase\";\r\nimport AuthForm from \"components/AuthForm\";\r\n\r\n// 인증의 모든 과정은 authService가 처리한다.\r\n// 사용자가 제공하는 건 그저 form과 input 뿐이다.\r\n// Submit을 통해 입력된 email과 password를 authService의 createWithEmailAndPassword를 통해 제출하면 firebase에서 회원가입 처리를 진행한다.\r\n// newAccount를 통해 계정이 있는지 없는지 여부를 가려내고 계정이 있다면 singInwithEmailAndPassword를 통해 로그인 기능을 구현한다.\r\n// SignWithPopup과 SignWithRedirect를 통해 google과 github를 통해 로그인 가능하다.\r\n// 여기서는 SignWithPopup으로 구글과 깃허브 로그인을 구현했다. (제일 간편)\r\n// 클릭한 버튼의 name을 통해 구글인가 깃허브인가를 판단한 후 거기에 맞춰 provider를 생성한다.\r\n// provider 생성을 위해서는 authService가 아니라 firebase(firebaseInstance)가 필요하다.\r\n// 그리고 authService의 signInWithPopup에 provider을 건네어 로그인을 시도할 수 있다.\r\n// 로그인을 위한 popup 창도 전부 자동으로 생성되니 정말로 간편하다.\r\nconst Auth = () => {\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n    let provider;\r\n    if (name === \"google\") {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === \"github\") {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    await authService.signInWithPopup(provider);\r\n  };\r\n\r\n  return (\r\n    <div className=\"authContainer\">\r\n      <FontAwesomeIcon\r\n        icon={faTwitter}\r\n        color={\"#04AAFF\"}\r\n        size=\"3x\"\r\n        style={{ marginBottom: 30 }}\r\n      />\r\n      <AuthForm />\r\n      <div className=\"authBtns\">\r\n        <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n        </button>\r\n        <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faFile } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n// 내가 Owner일 때만 수정과 삭제 버튼을 볼 수 있다.\r\n// confirm은 확인창을 사용자에게 띄워 true or false를 반환해준다.\r\n// dbService의 doc func은 collection 내의 doc을 반환하며 삭제와 업데이트를 담당하는 delete, update func을 가지고 있다.\r\n// Nweet은 우리가 만든 컴포넌트고 nweetObj는 전체의 nweet이다.\r\nconst Nweet = ({ userObj, nweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const [newNweet, setNewNweet] = useState(nweetObj.text);\r\n  const [prevAttachmentUrl, setPrevAttachmentUrl] = useState(\r\n    nweetObj.attachmentUrl\r\n  );\r\n  const [newAttachment, setNewAttachment] = useState(\"\");\r\n  const fileName = useRef();\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"Are you sure you wnat to delete this nweet?\");\r\n    if (ok) {\r\n      await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n      if (nweetObj.attachmentUrl !== \"\") {\r\n        await storageService.refFromURL(nweetObj.attachmentUrl).delete();\r\n      }\r\n    }\r\n  };\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n  const onSubmit = async (event) => {\r\n    let attachmentUrl = \"\";\r\n    event.preventDefault();\r\n    if (prevAttachmentUrl !== \"\") {\r\n      await storageService.refFromURL(nweetObj.attachmentUrl).delete();\r\n    }\r\n    if (newAttachment !== \"\") {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmentRef.putString(newAttachment, \"data_url\");\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n      setPrevAttachmentUrl(attachmentUrl);\r\n    } else {\r\n      setPrevAttachmentUrl(\"\");\r\n    }\r\n    await dbService\r\n      .doc(`nweets/${nweetObj.id}`)\r\n      .update({ text: newNweet, attachmentUrl });\r\n    setEditing(false);\r\n    setNewAttachment(\"\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewNweet(value);\r\n  };\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: {\r\n        files: {\r\n          0: { name },\r\n        },\r\n      },\r\n    } = event;\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const theFile = files[0];\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setNewAttachment(result);\r\n    };\r\n    let name_string = \"\";\r\n    if (theFile !== null) {\r\n      reader.readAsDataURL(theFile);\r\n      name_string = JSON.stringify(name).substring();\r\n    } else {\r\n      setNewAttachment(\"\");\r\n    }\r\n    fileName.current.innerText = name_string.substring(\r\n      1,\r\n      name_string.length - 1\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"nweet\">\r\n      {editing ? (\r\n        <>\r\n          <form onSubmit={onSubmit} className=\"container nweetEdit\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Edit your nweet\"\r\n              value={newNweet}\r\n              required\r\n              autoFocus\r\n              onChange={onChange}\r\n              className=\"formInput newText\"\r\n            />\r\n            <input\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              onChange={onFileChange}\r\n              className=\"formInput\"\r\n              id=\"newFile\"\r\n            />\r\n            <label for=\"newFile\" className=\"formInput newFile\" ref={fileName}>\r\n              <FontAwesomeIcon icon={faFile} />\r\n              &nbsp;파일 선택\r\n            </label>\r\n            <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\" />\r\n          </form>\r\n          <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n            Cancel\r\n          </span>\r\n        </>\r\n      ) : (\r\n        <>\r\n          {nweetObj.userName && (\r\n            <span className=\"nweetName\">{nweetObj.userName}</span>\r\n          )}\r\n          <h4>{nweetObj.text}</h4>\r\n          {nweetObj.attachmentUrl && <img src={nweetObj.attachmentUrl} />}\r\n          {isOwner && (\r\n            <div class=\"nweet__actions\">\r\n              <span onClick={onDeleteClick}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n              </span>\r\n              <span onClick={toggleEditing}>\r\n                <FontAwesomeIcon icon={faPencilAlt} />\r\n              </span>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nweet;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { storageService, dbService } from \"fbase\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NweetFactory = ({ userObj }) => {\r\n  const [nweet, setNweet] = useState(\"\");\r\n  const [attachment, setAttachment] = useState(\"\");\r\n  const fileInput = useRef();\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (nweet === \"\") {\r\n      return;\r\n    }\r\n    let attachmentUrl = \"\";\r\n    if (attachment !== \"\") {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmentRef.putString(attachment, \"data_url\");\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n    const nweetObj = {\r\n      text: nweet,\r\n      createAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      attachmentUrl,\r\n      userName: userObj.displayName,\r\n    };\r\n    await dbService.collection(\"nweets\").add(nweetObj);\r\n    setNweet(\"\");\r\n    setAttachment(\"\");\r\n    fileInput.current.value = \"\";\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNweet(value);\r\n  };\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const theFile = files[0];\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n    if (theFile != null) {\r\n      reader.readAsDataURL(theFile);\r\n    } else {\r\n      setAttachment(\"\");\r\n    }\r\n  };\r\n  const onClearAttachment = () => setAttachment(\"\");\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <input\r\n          className=\"factoryInput__input\"\r\n          value={nweet}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n          autoFocus\r\n        />\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n      </div>\r\n      <label for=\"attach-file\" className=\"factoryInput__label\">\r\n        <span>Add photos</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </label>\r\n      <input\r\n        id=\"attach-file\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={onFileChange}\r\n        style={{\r\n          opacity: 0,\r\n        }}\r\n        ref={fileInput}\r\n      />\r\n      {attachment && (\r\n        <div className=\"factoryForm__attachment\">\r\n          <img\r\n            src={attachment}\r\n            style={{\r\n              backgroundImage: attachment,\r\n            }}\r\n          />\r\n          <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n            <span>Remove</span>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NweetFactory;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport Nweet from \"components/Nweet\";\r\nimport NweetFactory from \"components/NweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [nweets, setNweets] = useState([]);\r\n  useEffect(() => {\r\n    dbService\r\n      .collection(\"nweets\")\r\n      .orderBy(\"createAt\", \"desc\")\r\n      .onSnapshot((snapshot) => {\r\n        const nweetArray = snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        }));\r\n        setNweets(nweetArray);\r\n        console.log(nweetArray);\r\n      });\r\n  }, []);\r\n  return (\r\n    <div className=\"container\">\r\n      <NweetFactory userObj={userObj} />\r\n      <div className=\"nContainer\" style={{ marginTop: 30 }}>\r\n        {nweets.map((nweet) => (\r\n          <Nweet\r\n            key={nweet.id}\r\n            nweetObj={nweet}\r\n            isOwner={nweet.creatorId === userObj.uid}\r\n            userObj={userObj}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\r\nimport { authService } from \"fbase\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n// authService의 signOut을 통해 로그아웃 기능을 구현할 수 있다.\r\n// 로그아웃 해도 profile 컴포넌트 내부에 있어선 안돼기에 history를 통해 뒤로 보낸다.(usehistory를 통해 생성)\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default ({ refreshUser, userObj }) => {\r\n  const history = useHistory();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    history.push(\"/\");\r\n  };\r\n  // const getMyNweets = async () => {\r\n  //   const nweets = await dbService\r\n  //     .collection(\"nweets\")\r\n  //     .where(\"creatorId\", \"==\", userObj.uid)\r\n  //     .orderBy(\"createAt\")\r\n  //     .get();\r\n  //   console.log(nweets.docs.map((doc) => doc.data()));\r\n  // };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      // updateProfile은 두가지를 업데이트 할 수 있게 해준다. displayName과 photoURL이다.\r\n      await userObj.updateProfile({ displayName: newDisplayName });\r\n      refreshUser();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={onSubmit} className=\"profileForm\">\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          autoFocus\r\n          placeholder=\"Display name\"\r\n          value={newDisplayName}\r\n          className=\"formInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Update Profile\"\r\n          className=\"formBtn\"\r\n          style={{\r\n            marginTop: 10,\r\n          }}\r\n        />\r\n      </form>\r\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n        Log Out\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({ userObj }) => (\r\n  <nav>\r\n    <h1>Enter World Nwitter!</h1>\r\n    <h3>\r\n      Gald to meet you! I'm writing not important things because i just want\r\n      fill this space! i don't know english! is this enough? yeah maybe...?\r\n      thanks your reading like this crazy writings!\r\n    </h3>\r\n    {/* <p>\r\n        HI! this Page is for your Social network Acting. You can contact another\r\n        poeaple by this service. I glad to give you This Chance. Have a Good\r\n        Time!\r\n      </p> */}\r\n    <ul>\r\n      <li>\r\n        <Link to=\"/\">\r\n          <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n        </Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/profile\">\r\n          <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n          <span>\r\n            {userObj.displayName\r\n              ? `${userObj.displayName}의 Profile`\r\n              : \"Profile\"}\r\n          </span>\r\n        </Link>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Profile from \"routes/Profile\";\r\nimport Navigation from \"components/Navigation\";\r\n\r\n// 로그인 여부에 따라 Home과 Auth 컴포넌트를 렌딩한다.\r\n// 로그인 되어있을 때만 Navigation 컴포넌트를 렌딩한다.\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\r\n  return (\r\n    <Router>\r\n      {isLoggedIn && <Navigation userObj={userObj} />}\r\n      <Switch>\r\n        {isLoggedIn ? (\r\n          <div className=\"routerContainer\">\r\n            <Route exact path=\"/\">\r\n              <Home userObj={userObj} />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile userObj={userObj} refreshUser={refreshUser} />\r\n            </Route>\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Auth />\r\n            </Route>\r\n          </>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React, { useState, useEffect } from \"react\";\nimport AppRouter from \"./Router\";\nimport { authService } from \"fbase\";\n\n// 어플리케이션이 로드되면 파이어베이스는 로그인 되어있는지 아닌지 확인할 시간이 없다\n// 그래서 어플리케이션이 로드되면 반드시 로그아웃을 시켜줘야 한다(isLoggedIn이 false여야)\n// 다시 말하지만 그 이유는 파이어베이스가 초기화되고 모든 걸 로드할 때까지 기다려줄 시간이 없어서...\n// authService의 onAuthStateChanged를 사용하여 사용자의 로그인 상태의 변화를 관찰하는 관찰자를 추가시킨다\n// onAuthStateChanged는 event Listener이기 때문에 user 정보에 변화가 생기면 바로 함수를 실행한다.\n// init이 처음에 false인 이유는 파이어베이스의 초기화가 이루어지지 않은 상태에서 Router 컴포넌트를 숨기기 위함이다.\n// 만일 로그인이 된다면 userObj에 계정 정보인 user을 담아준다.\n// 계정 정보인 user은 정말 많은 계정 정보를 포함하고 있다. 물론, phtourl도 있다.\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserobj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setUserobj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserobj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserobj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n        />\n      ) : (\n        \"Initializing...\"\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"components/App\";\nimport firebase from \"fbase\";\nimport \"./reset.css\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}